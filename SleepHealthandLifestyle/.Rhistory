ggtitle("Diastolic distribution") +
theme_minimal()
data %>% ggplot(aes(x = Physical.Activity.Level)) +
geom_histogram(color = "#6DA7F2", fill = "#6DA7F2", alpha = 0.5, binwidth = 5) +
ggtitle("Physical Activity Level distribution") +
theme_minimal()
data %>% ggplot(aes(x = Physical.Activity.Level)) +
geom_density(aes(y = after_stat(count)),color = "#6DA7F2", fill = "#6DA7F2", alpha = 0.5, binwidth = 5) +
ggtitle("Physical Activity Level distribution") +
theme_minimal()
data %>% ggplot(aes(y= Physical.Activity.Level, x = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_violin() +
scale_fill_viridis(discrete = TRUE, alpha = 0.6) +
theme_minimal() +
ggtitle("Quality of sleep") + xlab("")
data %>% ggplot(aes(x = Physical.Activity.Level, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Physical Activity Level distribution") +
theme_minimal()
ggplot(data, aes(x=data$Daily.Steps))  +
geom_density(aes(y = after_stat(count)),color="lightblue", fill = "lightblue", alpha = 0.5)+
labs(x = "Daily Steps", y = "Count") +
theme_minimal()
ggplot(data, aes(x=data$Daily.Steps))  +
geom_density(aes(y = after_stat(count)),color="lightblue", fill = "blue", alpha = 0.5)+
labs(x = "Daily Steps", y = "Count") +
theme_minimal()
data %>% ggplot(aes(x = Daily.Steps, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Daily Steps distribution") +
theme_minimal()
data %>% select(Sleep.Disorder) %>%
count(Sleep.Disorder) %>% arrange(n) %>%
mutate(labels = scales::percent(n/sum(n))) %>%
ggplot(aes(x = "", y = labels, fill = Sleep.Disorder)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
ggtitle("Sleep Disorder") +
theme_void() +
geom_text(aes(label = labels), position = position_stack(vjust = 0.5), color = "white")
ggplot(data, aes(x = Gender, y = Age, fill = Sleep.Disorder)) +
geom_boxplot() +
labs(title = "Relationship Between Gender and Age",
x = "Gender",
y = "Age",
fill = "Sleep Disorder") +
scale_fill_manual(values = c("No Disorder" = "blue", "Sleep Apnea" = "red", "Insomnia" = "green")) +
theme_minimal()
ggplot(data, aes(x = Gender, y = Age, fill = Sleep.Disorder)) +
geom_boxplot() +
labs(title = "Relationship Between Gender and Age",
x = "Gender",
y = "Age",
fill = "Sleep Disorder") +
scale_fill_manual(values = c("Noner" = "blue", "Sleep Apnea" = "red", "Insomnia" = "green")) +
theme_minimal()
ggplot(data, aes(x = Gender, y = Age, fill = Sleep.Disorder)) +
geom_boxplot() +
labs(title = "Relationship Between Gender and Age",
x = "Gender",
y = "Age",
fill = "Sleep.Disorder") +
scale_fill_manual(values = c("Noner" = "blue", "Sleep Apnea" = "red", "Insomnia" = "green")) +
theme_minimal()
ggplot(data, aes(x = Gender, y = Age, fill = Sleep.Disorder)) +
geom_boxplot() +
labs(title = "Relationship Between Gender and Age",
x = "Gender",
y = "Age",
fill = "Sleep Disorder") +
scale_fill_manual(values = c("Noner" = "blue", "Sleep.Apnea" = "red", "Insomnia" = "green")) +
theme_minimal()
ggplot(data, aes(x = Gender, y = Age, fill = Sleep.Disorder)) +
geom_boxplot() +
labs(title = "Relationship Between Gender and Age",
x = "Gender",
y = "Age",
fill = "Sleep Disorder") +
scale_fill_manual(values = c("None" = "blue", "Sleep.Apnea" = "red", "Insomnia" = "green")) +
theme_minimal()
t_test_insomnia <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Insomnia"))
t_test_sleep_apnea <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Sleep Apnea"))
View(data)
t_test_sleep_apnea <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Sleep.Apnea"))
# In kết quả kiểm định t-test
print(t_test_insomnia)
print(t_test_sleep_apnea)
print(t_test_sleep_apnea)
t_test_insomnia <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Insomnia"))
t_test_sleep_apnea <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Sleep.Apnea"))
# In kết quả kiểm định t-test
print(t_test_insomnia)
print(t_test_sleep_apnea)
print(t_test_sleep_apnea)
# Tạo một data frame mới với các biến cần thiết
data_analysis <- data %>%
select(Occupation, Sleep.Duration, Quality.of.Sleep)
# Thực hiện phân tích ANOVA
anova_result <- aov(Quality.of.Sleep ~ Occupation * Sleep.Duration, data = data_analysis)
# Hiển thị kết quả phân tích ANOVA
summary(anova_result)
plot1 <- data %>% ggplot(aes(x = Stress.Level, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Stress Level distribution") +
theme_minimal()
plot2<- data %>% ggplot(aes(x = Heart.Rate, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Heart Rate distribution") +
theme_minimal()
plot3 <- data %>% ggplot(aes(y = Heart.Rate, x = Stress.Level, color = Sleep.Disorder)) +
geom_point() +
geom_smooth(method=lm , aes(fill= Sleep.Disorder), se=TRUE) +
theme_minimal()
ggarrange(ggarrange(plot1, plot2, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"), plot3, ncol = 1, nrow = 2 )
plot1 <- data %>% ggplot(aes(x = Stress.Level, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Stress Level distribution") +
theme_minimal()
plot2<- data %>% ggplot(aes(x = Heart.Rate, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Heart Rate distribution") +
theme_minimal()
plot3 <- data %>% ggplot(aes(y = Heart.Rate, x = Stress.Level, color = Sleep.Disorder)) +
geom_point() +
geom_smooth(method=lm , aes(fill= Sleep.Disorder), se=TRUE) +
theme_minimal()
# ggarrange(ggarrange(plot1, plot2, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"), plot3, ncol = 1, nrow = 2 )
# # ggarrange(plot1, plot2, ncol = 2, nrow = 1)
ggarrange(ggarrange(plot1, plot2, ncol = 2, nrow = 1, common.legend = TRUE,
legend = "bottom"), plot3, ncol = 1, nrow = 2 )
library(GGally)
ggarrange(ggarrange(plot1, plot2, ncol = 2, nrow = 1, common.legend = TRUE,
legend = "bottom"), plot3, ncol = 1, nrow = 2 )
library(ggplot2)
ggarrange(ggarrange(plot1, plot2, ncol = 2, nrow = 1, common.legend = TRUE,
legend = "bottom"), plot3, ncol = 1, nrow = 2 )
library(ggpubr)
ggarrange(ggarrange(plot1, plot2, ncol = 2, nrow = 1, common.legend = TRUE,
legend = "bottom"), plot3, ncol = 1, nrow = 2 )
ggplot(data, aes(x = BMI.Category, y = Quality.of.Sleep, fill=Sleep.Disorder)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("None" = "lightpink", "Sleep.Apnea" = "darkslateblue","Insomnia"="blue")) +
labs(x = "BMI Category", y = "Quality of Sleep")
ggplot(data, aes(x =data$Heart.Rate, y =data$Systolic , color= data$Sleep.Disorder))  +
geom_point() +
labs(x = "Heart Rate", y = "Systolic") +
geom_smooth(method = 'loess',formula = 'y ~ x',mapping = aes(x =data$Heart.Rate, y =data$Systolic , color= data$Sleep.Disorder))
ggplot(data, aes(x =data$Heart.Rate, y =data$Diastolic , color= data$Sleep.Disorder))  +
geom_point() +
labs(x = "Heart Rate", y = "Diastolic") +
geom_smooth(method = 'loess',formula = 'y ~ x',mapping = aes(x =data$Heart.Rate, y =data$Diastolic , color= data$Sleep.Disorder))
## Load dữ liệu
preprocessed_data <- read.csv("Sleep_health_and_lifestyle_dataset.cs")
## Load dữ liệu
preprocessed_data <- read.csv("Sleep_health_and_lifestyle_dataset.cs")
## Load dữ liệu
preprocessed_data <- read.csv("Sleep_health_and_lifestyle_dataset.csv")
##  Loại bỏ các cột không sử dụng khi training
data <- preprocessed_data[, c(2:13)]
## Transform dứ liệu
data$Blood.Pressure <- sub("/", " ", data$Blood.Pressure)
data <- separate(data, Blood.Pressure, into = c("Systolic", "Diastolic"), sep = " ")
data$Systolic <- as.numeric(data$Systolic)
data$Diastolic <- as.numeric(data$Diastolic)
data$BMI.Category<- gsub("Normal Weight", "Normal", data$BMI.Category)
data$BMI.Category<- gsub("Obese", "Obesity", data$BMI.Category)
data$Sleep.Disorder[data$Sleep.Disorder == "Sleep Apnea"] = "Sleep.Apnea"
data <- data %>% transform(Sleep.Disorder = as.factor(Sleep.Disorder))
data$Occupation <- as.factor(data$Occupation)
data$Gender <- as.factor(data$Gender)
data$BMI.Category <- as.factor(data$BMI.Category)
## Load dữ liệu
preprocessed_data <- read.csv("Sleep_health_and_lifestyle_dataset.csv")
##  Loại bỏ các cột không sử dụng khi training
data <- preprocessed_data[, c(2:3, 5:13)]
library(tidyverse)
library(dplyr)
library(ggplot2)
library(GGally)
library(caret)
library(skimr)
library(rpart)
library(rpart.plot)
library(tidyr)
## Load dữ liệu
preprocessed_data <- read.csv("Sleep_health_and_lifestyle_dataset.csv")
##  Loại bỏ các cột không sử dụng khi training
data <- preprocessed_data[, c(2:3, 5:13)]
## Transform dứ liệu
data$Blood.Pressure <- sub("/", " ", data$Blood.Pressure)
data <- separate(data, Blood.Pressure, into = c("Systolic", "Diastolic"), sep = " ")
data$Systolic <- as.numeric(data$Systolic)
data$Diastolic <- as.numeric(data$Diastolic)
data$BMI.Category<- gsub("Normal Weight", "Normal", data$BMI.Category)
data$BMI.Category<- gsub("Obese", "Obesity", data$BMI.Category)
data$Sleep.Disorder[data$Sleep.Disorder == "Sleep Apnea"] = "Sleep.Apnea"
data <- data %>% transform(Sleep.Disorder = as.factor(Sleep.Disorder))
data$Gender <- as.factor(data$Gender)
data$BMI.Category <- as.factor(data$BMI.Category)
## Chia dữ liệu thành training và testing
set.seed(111)
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.8, 0.2))
train_data <- data[ind==1,]
test_data <- data[ind==2,]
## Chạy giải thuật Decision tree -----------------------------------------------------------------------------
decision_tree<- rpart(Sleep.Disorder ~ .,
data = train_data,
method = 'class',
xval = 10, # k-fold với k = 10
)
## In kết quả sau khi chạy giải thuật
printcp(decision_tree)
## Vẽ Cây
rpart.plot(decision_tree,type=0, yesno = TRUE)
## Liệt kê các rules
rpart.rules(decision_tree)
## Vẽ đồ thị cp (cost complexity)
plotcp(decision_tree)
## Cắt tỉa cây với cp nhỏ nhất
library(caret)
decision_tree_prune <- prune(decision_tree,
cp = decision_tree$cptable[which.min(decision_tree$cptable[, "xerror"]), "CP"])
# in cp
printcp(decision_tree_prune)
# Vẽ cây sau cắt tỉa
rpart.plot(decision_tree_prune, type=0, yesno = TRUE)
## Hiển thị rules sau khi ccatws tỉa
(rpart.rules(decision_tree_prune))
# Lưu model
saveRDS(decision_tree_prune, file = "DecisionTree.rds")
## Random Forest --------------------------------------------------------------------------------------------
library(randomForest)
## thuật toán
rf_model <- randomForest(Sleep.Disorder~., data = train_data, ntree = 1000, important = TRUE)
# Kết quả sau khi chay jmoo hình
rf_model
# Vẽ đồ thị biểu hiện các error của các lớp theo số lượng cây
oob_err_data <- data.frame(
Trees = rep(1:nrow(rf_model$err.rate), 4),
Type = rep(c("OOB", "Insomnia", "None", "Sleep.Apnea"), each = nrow(rf_model$err.rate)),
Error = c(rf_model$err.rate[,"OOB"], rf_model$err.rate[,"Insomnia"], rf_model$err.rate[,"None"], rf_model$err.rate[, "Sleep.Apnea"]))
ggplot(data = oob_err_data, aes(x = Trees, y= Error)) + geom_line(aes(color = Type))+ theme(text = element_text(size = 40)) + theme_minimal()
# tìm mtry
rf_fit <- train(Sleep.Disorder~.,
data = train_data,
method = "ranger",
tuneLength = 12,
metric = "ROC",
trControl = trainControl(
method = "repeatedcv",  # k-fold cross validation
number = 10,  # 10 folds
savePredictions = "final",
classProbs = TRUE,
summaryFunction = defaultSummary
)
)
rf_fit
plot(rf_fit)
# xây dựng mô hình với mtry nhỏ nhất vừa tìm được
set.seed(111)
rf_model_2 <- randomForest(Sleep.Disorder~., data = train_data, mtry = rf_fit$bestTune$mtry, splitrule = rf_fit$bestTune$splitrule, importance = TRUE, ntree = 1000)
rf_model_2
# Lưu model
saveRDS(rf_model_2, file = "RFModel.rds")
##  Validation --------------------------------------------------
# Test validation of the Decision Tree
predict_decision_tree <- predict(decision_tree, newdata = test_data, type="class")
confusionMatrix(test_data$Sleep.Disorder, predict_decision_tree)
# Test validation of the Random Forest
predict_rf <- predict(rf_model_2, newdata = test_data, type = "class")
confusionMatrix(test_data$Sleep.Disorder,predict_rf)
t_test_insomnia <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Insomnia"))
t_test_sleep_apnea <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Sleep.Apnea"))
# In kết quả kiểm định t-test
print(t_test_insomnia)
print(t_test_sleep_apnea)
print(t_test_sleep_apnea)
predict_decision_tree <- predict(decision_tree, newdata = test_data, type="class")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(GGally)
library(caret)
library(skimr)
library(scales)
library(hrbrthemes)
library(viridis)
## Load dữ liệu
preprocessed_data <- read.csv("Sleep_health_and_lifestyle_dataset.csv")
##  Loại bỏ các cột không sử dụng khi training
data <- preprocessed_data[, c(2:13)]
## Transform dứ liệu
data$Blood.Pressure <- sub("/", " ", data$Blood.Pressure)
data <- separate(data, Blood.Pressure, into = c("Systolic", "Diastolic"), sep = " ")
data$Systolic <- as.numeric(data$Systolic)
data$Diastolic <- as.numeric(data$Diastolic)
data$BMI.Category<- gsub("Normal Weight", "Normal", data$BMI.Category)
data$BMI.Category<- gsub("Obese", "Obesity", data$BMI.Category)
data$Sleep.Disorder[data$Sleep.Disorder == "Sleep Apnea"] = "Sleep.Apnea"
data <- data %>% transform(Sleep.Disorder = as.factor(Sleep.Disorder))
data$Occupation <- as.factor(data$Occupation)
data$Gender <- as.factor(data$Gender)
data$BMI.Category <- as.factor(data$BMI.Category)
ggplot(data, aes(x = Gender, y = Age, fill = Sleep.Disorder)) +
geom_boxplot() +
labs(title = "Relationship Between Gender and Age",
x = "Gender",
y = "Age",
fill = "Sleep Disorder") +
scale_fill_manual(values = c("None" = "blue", "Sleep.Apnea" = "red", "Insomnia" = "green")) +
theme_minimal()
t_test_insomnia <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Insomnia"))
t_test_sleep_apnea <- t.test(Age ~ Gender, data = subset(data, Sleep.Disorder == "Sleep.Apnea"))
# In kết quả kiểm định t-test
print(t_test_insomnia)
print(t_test_sleep_apnea)
print(t_test_sleep_apnea)
# Tạo một data frame mới với các biến cần thiết
data_analysis <- data %>%
select(Occupation, Sleep.Duration, Quality.of.Sleep)
# Thực hiện phân tích ANOVA
anova_result <- aov(Quality.of.Sleep ~ Occupation * Sleep.Duration, data = data_analysis)
# Hiển thị kết quả phân tích ANOVA
summary(anova_result)
plot1 <- data %>% ggplot(aes(x = Stress.Level, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Stress Level distribution") +
theme_minimal()
plot2<- data %>% ggplot(aes(x = Heart.Rate, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("Heart Rate distribution") +
theme_minimal()
plot3 <- data %>% ggplot(aes(y = Heart.Rate, x = Stress.Level, color = Sleep.Disorder)) +
geom_point() +
geom_smooth(method=lm , aes(fill= Sleep.Disorder), se=TRUE) +
theme_minimal()
library(ggpubr)
ggarrange(ggarrange(plot1, plot2, ncol = 2, nrow = 1, common.legend = TRUE,
legend = "bottom"), plot3, ncol = 1, nrow = 2 )
Physic_plot <-data %>% ggplot(aes(x = Physical.Activity.Level, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("(a)") +
theme_minimal()
DStep_plot <- data %>% ggplot(aes(x = Daily.Steps, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("(b)") +
theme_minimal()
QSleep_plot <- data %>% ggplot(aes(x = Quality.of.Sleep, color = Sleep.Disorder, fill = Sleep.Disorder)) +
geom_density(aes(y= after_stat(count)), alpha = 0.1) +
ggtitle("(c)") +
theme_minimal()
Physic_DStep_plot <- data %>% ggplot(aes(x = Physical.Activity.Level, y = Daily.Steps, color = Sleep.Disorder)) +
geom_point() +
ggtitle("(d)") +
theme_minimal()
Physic_QSleep_plot <-data %>% ggplot(aes(x = Quality.of.Sleep, y = Physical.Activity.Level, color = Sleep.Disorder)) +
geom_point() +
geom_smooth(method=lm , aes(fill= Sleep.Disorder), se=TRUE) +
ggtitle("(e)") +
theme_minimal()
DStep_QSleep_plot <- data %>% ggplot(aes(x = Quality.of.Sleep, y = Daily.Steps, color = Sleep.Disorder)) +
geom_point() +
ggtitle("(f)")+
geom_smooth(method=lm , aes(fill= Sleep.Disorder), se=TRUE) +
theme_minimal()
library(ggpubr)
ggarrange(
Physic_plot, DStep_plot, QSleep_plot, Physic_DStep_plot, Physic_QSleep_plot, DStep_QSleep_plot,
ncol = 2, nrow = 3,
common.legend = TRUE, legend = "bottom"
)
ggplot(data, aes(x = BMI.Category, y = Quality.of.Sleep, fill=Sleep.Disorder)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("None" = "lightpink", "Sleep.Apnea" = "darkslateblue","Insomnia"="blue")) +
labs(x = "BMI Category", y = "Quality of Sleep")
ggplot(data, aes(x =data$Heart.Rate, y =data$Systolic , color= data$Sleep.Disorder))  +
geom_point() +
labs(x = "Heart Rate", y = "Systolic") +
geom_smooth(method = 'loess',formula = 'y ~ x',mapping = aes(x =data$Heart.Rate, y =data$Systolic , color= data$Sleep.Disorder))
ggplot(data, aes(x =data$Heart.Rate, y =data$Diastolic , color= data$Sleep.Disorder))  +
geom_point() +
labs(x = "Heart Rate", y = "Diastolic") +
geom_smooth(method = 'loess',formula = 'y ~ x',mapping = aes(x =data$Heart.Rate, y =data$Diastolic , color= data$Sleep.Disorder))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(GGally)
library(caret)
library(skimr)
library(rpart)
library(rpart.plot)
library(tidyr)
# setwd("H:/My Drive/R Project/SleepHealthandLifestyle")
data <- read.csv("Sleep_health_and_lifestyle_dataset.csv")
data <- data[, c(2:3, 5:13)]
data$Blood.Pressure <- sub("/", " ", data$Blood.Pressure)
data <- separate(data, Blood.Pressure, into = c("Systolic", "Diastolic"), sep = " ")
data$Systolic <- as.numeric(data$Systolic)
data$Diastolic <- as.numeric(data$Diastolic)
data$BMI.Category<- gsub("Normal Weight", "Normal", data$BMI.Category)
data$BMI.Category<- gsub("Obese", "Obesity", data$BMI.Category)
data$Sleep.Disorder[data$Sleep.Disorder == "Sleep Apnea"] = "Sleep.Apnea"
data <- data %>% transform(Sleep.Disorder = as.factor(Sleep.Disorder))
data$Gender <- as.factor(data$Gender)
data$BMI.Category <- as.factor(data$BMI.Category)
set.seed(111)
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.8, 0.2))
train_data <- data[ind==1,]
test_data <- data[ind==2,]
addmargins(prop.table(table(ind)))
decision_tree<- rpart(Sleep.Disorder ~ .,
data = train_data,
method = 'class',
xval = 10, # k-fold với k = 10
)
printcp(decision_tree)
rpart.plot(decision_tree,type=0, yesno = TRUE)
rpart.rules(decision_tree)
plotcp(decision_tree)
library(caret)
decision_tree_prune <- prune(decision_tree,
cp = decision_tree$cptable[which.min(decision_tree$cptable[, "xerror"]), "CP"])
printcp(decision_tree_prune)
rpart.plot(decision_tree_prune, type=0, yesno = TRUE)
(rpart.rules(decision_tree_prune))
save(decision_tree_prune, file = "DecisionTree.rda")
saveRDS(decision_tree_prune, file = "DecisionTree.rds")
data <- read.csv("Sleep_health_and_lifestyle_dataset.csv")
data <- data[, c(2:3, 5:13)]
summary(data)
data$Blood.Pressure <- sub("/", " ", data$Blood.Pressure)
data <- separate(data, Blood.Pressure, into = c("Systolic", "Diastolic"), sep = " ")
data$Systolic <- as.numeric(data$Systolic)
data$Diastolic <- as.numeric(data$Diastolic)
data$BMI.Category<- gsub("Normal Weight", "Normal", data$BMI.Category)
data$BMI.Category<- gsub("Obese", "Obesity", data$BMI.Category)
data$Sleep.Disorder[data$Sleep.Disorder == "Sleep Apnea"] = "Sleep.Apnea"
data <- data %>% transform(Sleep.Disorder = as.factor(Sleep.Disorder))
data$Gender <- as.factor(data$Gender)
data$BMI.Category <- as.factor(data$BMI.Category)
set.seed(111)
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.8, 0.2))
train_data <- data[ind==1,]
test_data <- data[ind==2,]
addmargins(prop.table(table(ind)))
library(randomForest)
library(caret)
rf_model <- randomForest(Sleep.Disorder~., data = train_data, ntree = 1000, important = TRUE)
rf_model
# plot(rf_model)
library(randomForest)
oob_err_data <- data.frame(
Trees = rep(1:nrow(rf_model$err.rate), 4),
Type = rep(c("OOB", "Insomnia", "None", "Sleep.Apnea"), each = nrow(rf_model$err.rate)),
Error = c(rf_model$err.rate[,"OOB"], rf_model$err.rate[,"Insomnia"], rf_model$err.rate[,"None"], rf_model$err.rate[, "Sleep.Apnea"]))
ggplot(data = oob_err_data, aes(x = Trees, y= Error)) + geom_line(aes(color = Type))+ theme(text = element_text(size = 40)) + theme_minimal()
rf_fit <- train(Sleep.Disorder~.,
data = train_data,
method = "ranger",
tuneLength = 12,
metric = "ROC",
trControl = trainControl(
method = "repeatedcv",  # k-fold cross validation
number = 10,  # 10 folds
savePredictions = "final",
classProbs = TRUE,
summaryFunction = defaultSummary
)
)
rf_fit
plot(rf_fit)
set.seed(111)
rf_model_2 <- randomForest(Sleep.Disorder~., data = train_data, mtry = rf_fit$bestTune$mtry, splitrule = rf_fit$bestTune$splitrule, importance = TRUE, ntree = 1000)
rf_model_2
save(rf_model_2, file = "RFModel.rda")
saveRDS(rf_model_2, file = "RFModel.rds")
predict_decision_tree <- predict(decision_tree, newdata = test_data, type="class")
confusionMatrix(test_data$Sleep.Disorder, predict_decision_tree)
predict_rf <- predict(rf_model_2, newdata = test_data, type = "class")
confusionMatrix(test_data$Sleep.Disorder,predict_rf)
# library(Metrics)
recall()
(rfconf <- confusionMatrix(test_data$Sleep.Disorder,predict_rf))
# library(Metrics)
rfconf$mode
# library(Metrics)
rfconf$positive
# library(Metrics)
rfconf$table
# library(Metrics)
rfconf$overall
# library(Metrics)
rfconf$byClass
# library(Metrics)
rfconf$dots
# library(Metrics)
View(rfconf$dots)
recal(predict_rf, test_data["Sleep.Disorder"])
recall(predict_rf, test_data["Sleep.Disorder"])
predict_rf
test_data["Sleep.Disorder"]
```{r}
recall(predict_rf, test_data["Sleep.Disorder"])
recall(predict_rf, relevant = test_data["Sleep.Disorder"])
predict_rf
test_data["Sleep.Disorder"]
recall(predict_rf, relevant = as.factor(test_data["Sleep.Disorder"]))
rf_conf$table
rfconf$table
recal(rfconf$table)
recall(rfconf$table)
precision(rfconf$table)
